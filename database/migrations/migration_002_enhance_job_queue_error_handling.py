#!/usr/bin/env python3
"""
Migration 002: Enhanced Job Queue Error Handling

–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É job_queue –¥–ª—è Phase 6 - Error Handling & Retry Logic:
- failure_type: –¢–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
- next_retry_at: –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ retry
- last_error_traceback: –ü–æ–ª–Ω—ã–π traceback –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
- dead_letter_reason: –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ dead letter queue
- moved_to_dead_letter_at: –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ dead letter queue
"""

import sqlite3
from datetime import datetime
from pathlib import Path


MIGRATION_ID = "002_enhance_job_queue_error_handling"
MIGRATION_DESCRIPTION = "Enhanced Job Queue Error Handling for Phase 6"


def upgrade(db_path: str):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è error handling."""
    print(f"üîÑ Applying migration {MIGRATION_ID}...")
    
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è enhanced error handling
        new_columns = [
            ("failure_type", "TEXT"),  # –¢–∏–ø –æ—à–∏–±–∫–∏ (JobFailureType enum)
            ("next_retry_at", "TIMESTAMP"),  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ retry
            ("last_error_traceback", "TEXT"),  # –ü–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏
            ("dead_letter_reason", "TEXT"),  # –ü—Ä–∏—á–∏–Ω–∞ dead letter
            ("moved_to_dead_letter_at", "TIMESTAMP")  # –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ dead letter
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        cursor.execute("PRAGMA table_info(job_queue)")
        existing_columns = {row[1] for row in cursor.fetchall()}
        
        added_columns = []
        for column_name, column_type in new_columns:
            if column_name not in existing_columns:
                cursor.execute(f"ALTER TABLE job_queue ADD COLUMN {column_name} {column_type}")
                added_columns.append(column_name)
                print(f"  ‚úÖ Added column: {column_name} ({column_type})")
            else:
                print(f"  ‚ö†Ô∏è  Column already exists: {column_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        indexes_to_create = [
            ("idx_job_queue_next_retry", "next_retry_at"),
            ("idx_job_queue_failure_type", "failure_type"),
            ("idx_job_queue_dead_letter", "moved_to_dead_letter_at")
        ]
        
        for index_name, column_name in indexes_to_create:
            if column_name in added_columns or column_name in existing_columns:
                try:
                    cursor.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON job_queue({column_name})")
                    print(f"  üîç Created index: {index_name}")
                except sqlite3.OperationalError as e:
                    print(f"  ‚ö†Ô∏è  Index creation skipped: {index_name} - {e}")
        
        conn.commit()
        print(f"‚úÖ Migration {MIGRATION_ID} applied successfully!")


def downgrade(db_path: str):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é (SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN –¥–æ –≤–µ—Ä—Å–∏–∏ 3.35)."""
    print(f"‚ö†Ô∏è  Migration {MIGRATION_ID} downgrade not supported by SQLite")
    print("   New columns will remain in the table but won't be used")


def get_migration_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    return {
        "id": MIGRATION_ID,
        "description": MIGRATION_DESCRIPTION,
        "upgrade": upgrade,
        "downgrade": downgrade,
        "applied_at": None
    }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    import os
    import tempfile
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
        test_db_path = tmp_db.name
    
    try:
        print("üß™ Testing migration on temporary database...")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É job_queue (–∫–∞–∫ –≤ migration_001)
        with sqlite3.connect(test_db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE job_queue (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    job_type TEXT NOT NULL,
                    job_data TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT 'pending',
                    priority INTEGER NOT NULL DEFAULT 5,
                    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    started_at TIMESTAMP,
                    completed_at TIMESTAMP,
                    log_file_path TEXT,
                    error_message TEXT,
                    retry_count INTEGER NOT NULL DEFAULT 0,
                    max_retries INTEGER NOT NULL DEFAULT 3,
                    worker_id TEXT,
                    timeout_seconds INTEGER,
                    parent_job_id INTEGER,
                    FOREIGN KEY (parent_job_id) REFERENCES job_queue(id)
                )
            """)
            conn.commit()
            print("  üìã Created base job_queue table")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        upgrade(test_db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with sqlite3.connect(test_db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(job_queue)")
            columns = [row[1] for row in cursor.fetchall()]
            
            print("\nüìä Final table structure:")
            for col in columns:
                print(f"  - {col}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            expected_new_columns = [
                'failure_type', 'next_retry_at', 'last_error_traceback',
                'dead_letter_reason', 'moved_to_dead_letter_at'
            ]
            
            missing_columns = [col for col in expected_new_columns if col not in columns]
            if missing_columns:
                print(f"‚ùå Missing columns: {missing_columns}")
            else:
                print("‚úÖ All expected columns present!")
        
        print("\nüéâ Migration test completed successfully!")
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
        os.unlink(test_db_path)
        print(f"üßπ Cleaned up temporary database") 