#!/usr/bin/env python3
"""
Database Migration Manager

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""

import sqlite3
import importlib
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
from abc import ABC, abstractmethod


class Migration(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π."""
    
    def __init__(self):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä Migration001 -> 1)
        class_name = self.__class__.__name__
        if class_name.startswith('Migration') and class_name[9:].isdigit():
            self.number = int(class_name[9:])
        else:
            raise ValueError(f"Migration class name must be in format Migration001, got {class_name}")
    
    @abstractmethod
    def up(self, conn: sqlite3.Connection) -> None:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (—Å–æ–∑–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)."""
        pass
    
    @abstractmethod
    def down(self, conn: sqlite3.Connection) -> None:
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (–æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è).""" 
        pass
    
    @abstractmethod
    def description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—è."""
        pass


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self, db_path: str, migrations_dir: str = None):
        self.db_path = db_path
        if migrations_dir is None:
            self.migrations_dir = Path(__file__).parent / 'migrations'
        else:
            self.migrations_dir = Path(migrations_dir)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –º–∏–≥—Ä–∞—Ü–∏–π –≤ Python path
        sys.path.insert(0, str(self.migrations_dir.parent))
        
        self._ensure_migration_table()
    
    def _ensure_migration_table(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        conn = sqlite3.connect(self.db_path)
        try:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    migration_number INTEGER UNIQUE NOT NULL,
                    migration_name TEXT NOT NULL,
                    applied_at TEXT DEFAULT (datetime('now')),
                    rollback_at TEXT NULL
                )
            ''')
            conn.commit()
        finally:
            conn.close()
    
    def get_applied_migrations(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π."""
        conn = sqlite3.connect(self.db_path)
        try:
            cur = conn.cursor()
            cur.execute('''
                SELECT migration_number 
                FROM schema_migrations 
                WHERE rollback_at IS NULL
                ORDER BY migration_number
            ''')
            return [row[0] for row in cur.fetchall()]
        finally:
            conn.close()
    
    def get_available_migrations(self) -> List[Migration]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ migrations."""
        migrations = []
        
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .py –≤ –ø–∞–ø–∫–µ migrations
        if not self.migrations_dir.exists():
            return migrations
        
        for file_path in self.migrations_dir.glob('*.py'):
            if file_path.name.startswith('migration_') and file_path.name.endswith('.py'):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
                module_name = f"migrations.{file_path.stem}"
                try:
                    module = importlib.import_module(module_name)
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã Migration –≤ –º–æ–¥—É–ª–µ
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if (isinstance(attr, type) and 
                            issubclass(attr, Migration) and 
                            attr != Migration):
                            migrations.append(attr())
                            break
                    
                except Exception as e:
                    print(f"Warning: Failed to load migration {file_path}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –º–∏–≥—Ä–∞—Ü–∏–∏
        migrations.sort(key=lambda m: m.number)
        return migrations
    
    def get_pending_migrations(self) -> List[Migration]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."""
        applied = set(self.get_applied_migrations())
        available = self.get_available_migrations()
        
        return [m for m in available if m.number not in applied]
    
    def apply_migration(self, migration: Migration) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é."""
        conn = sqlite3.connect(self.db_path)
        try:
            print(f"Applying migration {migration.number:03d}: {migration.description()}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migration.up(conn)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            conn.execute('''
                INSERT INTO schema_migrations (migration_number, migration_name, applied_at)
                VALUES (?, ?, datetime('now'))
            ''', (migration.number, migration.__class__.__name__))
            
            conn.commit()
            print(f"‚úÖ Migration {migration.number:03d} applied successfully")
            return True
            
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Failed to apply migration {migration.number:03d}: {e}")
            return False
        finally:
            conn.close()
    
    def rollback_migration(self, migration: Migration) -> bool:
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é."""
        conn = sqlite3.connect(self.db_path)
        try:
            print(f"Rolling back migration {migration.number:03d}: {migration.description()}")
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migration.down(conn)
            
            # –ü–æ–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –æ—Ç–∫–∞—á–µ–Ω–Ω—É—é
            conn.execute('''
                UPDATE schema_migrations 
                SET rollback_at = datetime('now')
                WHERE migration_number = ? AND rollback_at IS NULL
            ''', (migration.number,))
            
            conn.commit()
            print(f"‚úÖ Migration {migration.number:03d} rolled back successfully")
            return True
            
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Failed to rollback migration {migration.number:03d}: {e}")
            return False
        finally:
            conn.close()
    
    def migrate(self) -> int:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        pending = self.get_pending_migrations()
        
        if not pending:
            print("‚úÖ Database is up to date")
            return 0
        
        print(f"üìã Found {len(pending)} pending migration(s)")
        
        applied_count = 0
        for migration in pending:
            if self.apply_migration(migration):
                applied_count += 1
            else:
                print(f"‚ùå Stopped at migration {migration.number:03d}")
                break
        
        if applied_count == len(pending):
            print(f"‚úÖ Successfully applied {applied_count} migration(s)")
        else:
            print(f"‚ö†Ô∏è  Applied {applied_count}/{len(pending)} migration(s)")
        
        return applied_count
    
    def migrate_json(self) -> int:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è JSON)."""
        pending = self.get_pending_migrations()
        
        if not pending:
            return 0
        
        applied_count = 0
        for migration in pending:
            if self.apply_migration_silent(migration):
                applied_count += 1
            else:
                break
        
        return applied_count
    
    def apply_migration_silent(self, migration: Migration) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        conn = sqlite3.connect(self.db_path)
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migration.up(conn)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            conn.execute('''
                INSERT INTO schema_migrations (migration_number, migration_name, applied_at)
                VALUES (?, ?, datetime('now'))
            ''', (migration.number, migration.__class__.__name__))
            
            conn.commit()
            return True
            
        except Exception:
            conn.rollback()
            return False
        finally:
            conn.close()
    
    def rollback_migration_json(self, migration: Migration) -> bool:
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è JSON)."""
        conn = sqlite3.connect(self.db_path)
        try:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migration.down(conn)
            
            # –ü–æ–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –æ—Ç–∫–∞—á–µ–Ω–Ω—É—é
            conn.execute('''
                UPDATE schema_migrations 
                SET rollback_at = datetime('now')
                WHERE migration_number = ? AND rollback_at IS NULL
            ''', (migration.number,))
            
            conn.commit()
            return True
            
        except Exception:
            conn.rollback()
            return False
        finally:
            conn.close()
    
    def status(self) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π."""
        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        pending = self.get_pending_migrations()
        
        print(f"üìä MIGRATION STATUS")
        print(f"={'='*50}")
        print(f"Database: {self.db_path}")
        print(f"Applied migrations: {len(applied)}")
        print(f"Available migrations: {len(available)}")
        print(f"Pending migrations: {len(pending)}")
        
        if available:
            print(f"\nüìã AVAILABLE MIGRATIONS:")
            for migration in available:
                status_icon = "‚úÖ" if migration.number in applied else "‚è≥"
                print(f"   {status_icon} {migration.number:03d}: {migration.description()}")
        
        return {
            'applied_count': len(applied),
            'available_count': len(available),
            'pending_count': len(pending),
            'applied_migrations': applied,
            'pending_migrations': [m.number for m in pending]
        }
    
    def status_json(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è JSON."""
        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        pending = self.get_pending_migrations()
        
        migrations_info = []
        for migration in available:
            migrations_info.append({
                'number': migration.number,
                'description': migration.description(),
                'applied': migration.number in applied,
                'status': 'applied' if migration.number in applied else 'pending'
            })
        
        return {
            'success': True,
            'command': 'status',
            'database_path': self.db_path,
            'applied_count': len(applied),
            'available_count': len(available),
            'pending_count': len(pending),
            'applied_migrations': applied,
            'pending_migrations': [m.number for m in pending],
            'migrations': migrations_info
        }


def main():
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Database Migration Manager")
    parser.add_argument('--db-path', help="Path to database file")
    parser.add_argument('command', choices=['migrate', 'status', 'rollback'], 
                       help="Command to execute")
    parser.add_argument('--migration', type=int, help="Specific migration number for rollback")
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = args.db_path
    if not db_path:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env
        env_path = Path(__file__).parent.parent / '.env'
        if env_path.exists():
            try:
                with open(env_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line.startswith('DB_PATH='):
                            db_path = line.split('=', 1)[1].strip().lstrip('\ufeff')
                            break
            except Exception:
                pass
    
    if not db_path:
        db_path = "tracks.db"
    
    print(f"üîó Using database: {db_path}")
    
    manager = MigrationManager(db_path)
    
    if args.command == 'migrate':
        manager.migrate()
    elif args.command == 'status':
        manager.status()
    elif args.command == 'rollback':
        if not args.migration:
            print("‚ùå --migration parameter required for rollback")
            sys.exit(1)
        
        available = manager.get_available_migrations()
        migration_to_rollback = None
        for m in available:
            if m.number == args.migration:
                migration_to_rollback = m
                break
        
        if not migration_to_rollback:
            print(f"‚ùå Migration {args.migration} not found")
            sys.exit(1)
        
        manager.rollback_migration(migration_to_rollback)


if __name__ == "__main__":
    main() 