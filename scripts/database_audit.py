#!/usr/bin/env python3
"""
Database Audit Script - –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ, —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ –¥–∏—Å–∫–µ

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
"""

import sqlite3
import sys
import argparse
from pathlib import Path
from typing import List, Dict, Optional

def load_env_config() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞."""
    config = {}
    
    # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = Path(__file__).parent.parent
    env_path = current_dir / '.env'
    
    if env_path.exists():
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip().lstrip('\ufeff')  # Remove BOM
                    if line and '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
        except Exception as e:
            print(f"Warning: Failed to load .env file: {e}")
    
    return config

def find_missing_files(db_path: str, playlists_dir: str = None) -> List[Dict]:
    """–ù–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    missing_files = []
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        query = """
        SELECT t.id, t.video_id, t.name, t.relpath, t.play_likes, t.play_starts, t.last_start_ts,
               t.channel_group, t.published_date
        FROM tracks t
        WHERE t.video_id NOT IN (
            SELECT dt.video_id FROM deleted_tracks dt
        )
        ORDER BY t.play_likes DESC, t.play_starts DESC
        """
        
        cur.execute(query)
        tracks = cur.fetchall()
        
        print(f"[INFO] –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        for i, track in enumerate(tracks):
            track_id, video_id, name, relpath, play_likes, play_starts, last_start_ts, channel_group, published_date = track
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ç—Ä–µ–∫–æ–≤
            if (i + 1) % 100 == 0:
                print(f"[INFO] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {i + 1}/{len(tracks)} —Ç—Ä–µ–∫–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if playlists_dir:
                # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: PLAYLISTS_DIR + relpath
                file_path = Path(playlists_dir) / relpath
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                file_path = Path(relpath)
            
            if not file_path.exists():
                missing_files.append({
                    'track_id': track_id,
                    'video_id': video_id,
                    'name': name,
                    'relpath': relpath,
                    'full_path': str(file_path.resolve()),
                    'play_likes': play_likes or 0,
                    'play_starts': play_starts or 0,
                    'last_start_ts': last_start_ts,
                    'channel_group': channel_group,
                    'published_date': published_date
                })
        
        conn.close()
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    
    return missing_files

def print_full_list(missing_files: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤."""
    print(f"\n{'='*100}")
    print(f"[–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –¢–†–ï–ö–û–í]")
    print(f"{'='*100}")
    
    if not missing_files:
        print("‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ!")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(missing_files)} —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ:")
    print()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
    missing_files.sort(key=lambda x: (x['play_likes'], x['play_starts']), reverse=True)
    
    print(f"{'‚Ññ':<4} {'–õ–∞–π–∫–∏':<6} {'–ü—Ä–æ–∏–≥—Ä.':<8} {'ID':<12} {'–ü–æ–ª–Ω—ã–π –ø—É—Ç—å'}")
    print("-" * 150)
    
    for i, track in enumerate(missing_files):
        print(f"{i+1:<4} {track['play_likes']:<6} {track['play_starts']:<8} {track['video_id']:<12} {track['full_path']}")
    
    print()
    print(f"–í—Å–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤: {len(missing_files)}")

def print_audit_results(missing_files: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≤–∏–∑–∏–∏."""
    print(f"\n{'='*80}")
    print(f"[–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–í–ò–ó–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•]")
    print(f"{'='*80}")
    
    if not missing_files:
        print("‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ!")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(missing_files)} —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ:")
    print()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    missing_files.sort(key=lambda x: (x['play_likes'], x['play_starts']), reverse=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    liked_tracks = [f for f in missing_files if f['play_likes'] > 0]
    played_tracks = [f for f in missing_files if f['play_starts'] > 0]
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –¢—Ä–µ–∫–æ–≤ —Å –ª–∞–π–∫–∞–º–∏: {len(liked_tracks)}")
    print(f"  - –¢—Ä–µ–∫–æ–≤ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏: {len(played_tracks)}")
    print(f"  - –¢—Ä–µ–∫–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {len(missing_files) - len(played_tracks)}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    print(f"üîç –¢–æ–ø-20 –≤–∞–∂–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:")
    print(f"{'‚Ññ':<3} {'–õ–∞–π–∫–∏':<6} {'–ü—Ä–æ–∏–≥—Ä.':<8} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<60} {'ID'}")
    print("-" * 90)
    
    for i, track in enumerate(missing_files[:20]):
        name = track['name'][:55] + "..." if len(track['name']) > 58 else track['name']
        print(f"{i+1:<3} {track['play_likes']:<6} {track['play_starts']:<8} {name:<60} {track['video_id']}")
    
    if len(missing_files) > 20:
        print(f"... –∏ –µ—â–µ {len(missing_files) - 20} —Ç—Ä–µ–∫–æ–≤")
    
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    by_channel = {}
    for track in missing_files:
        channel = track['channel_group'] or 'Unknown'
        if channel not in by_channel:
            by_channel[channel] = []
        by_channel[channel].append(track)
    
    print(f"üìÅ –ü–æ –∫–∞–Ω–∞–ª–∞–º/–≥—Ä—É–ø–ø–∞–º:")
    for channel, tracks in sorted(by_channel.items(), key=lambda x: len(x[1]), reverse=True):
        print(f"  - {channel}: {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
    
    print()
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if liked_tracks:
        print(f"  - –¢—Ä–µ–∫–∏ —Å –ª–∞–π–∫–∞–º–∏ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
    print(f"  - –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0 –ª–∞–π–∫–æ–≤, 0 –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π)")
    print(f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

def main():
    parser = argparse.ArgumentParser(description="–†–µ–≤–∏–∑–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--db-path", help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--playlists-dir", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--export", help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª")
    parser.add_argument("--full-list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ —Å –ø—É—Ç—è–º–∏")
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    env_config = load_env_config()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = args.db_path
    if not db_path:
        db_path = env_config.get('DB_PATH')
    
    if not db_path or not Path(db_path).exists():
        print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ --db-path –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DB_PATH –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–≤–∞–∂–Ω–æ!)
    playlists_dir = args.playlists_dir
    if not playlists_dir:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: PLAYLISTS_DIR –∏–∑ .env
        playlists_dir = env_config.get('PLAYLISTS_DIR')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç PLAYLISTS_DIR, –∏—Å–ø–æ–ª—å–∑—É–µ–º ROOT_DIR/Playlists
        if not playlists_dir:
            root_dir = env_config.get('ROOT_DIR')
            if root_dir:
                playlists_dir = str(Path(root_dir) / 'Playlists')
    
    print(f"[INFO] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    if playlists_dir:
        print(f"[INFO] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {playlists_dir}")
    else:
        print(f"[INFO] –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≤–∏–∑–∏—é
    missing_files = find_missing_files(db_path, playlists_dir)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.full_list:
        print_full_list(missing_files)
    else:
        print_audit_results(missing_files)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ requested
    if args.export and missing_files:
        try:
            import csv
            with open(args.export, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['video_id', 'name', 'relpath', 'full_path', 'play_likes', 'play_starts', 'channel_group']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                for track in missing_files:
                    writer.writerow({k: track[k] for k in fieldnames})
            print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {args.export}")
        except Exception as e:
            print(f"\n[ERROR] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

if __name__ == "__main__":
    main() 